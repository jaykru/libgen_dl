* TODO add filtering functionality
* TODO use zed for interactive search input
* TODO scale book metadata elision to terminal width
* TODO modularize search mirror functionality
* TODO eliminate uses of require, move to better error handling
  almost done
* TODO fix unicode title bug, other issues with titles
  see https://erratique.ch/software/uutf/doc/Uutf#examples:
  #+begin_src ocaml
    let cleaned ?encoding (src : [`Channel of in_channel | `String of string]) =
    let rec loop d buf acc = match Uutf.decode d with
    | `Uchar u -> Uutf.Buffer.add_utf_8 buf u; loop d buf acc
    | `End -> List.rev (Buffer.contents buf :: acc)
    | `Malformed _ -> Uutf.Buffer.add_utf_8 buf Uutf.u_rep; loop d buf acc
    | `Await -> assert false
    in
    (* let nln = `Readline (Uchar.of_int 0x000A) in *)
    loop (Uutf.decoder ?encoding src) (Buffer.create 128) []
  #+end_src
  replaces malformed ocaml bytes with a Uutf.u_rep character (ï¿½ almost certainly)

  i have a working basic fix for this bug, but certain code points cause
  problems with Notty/Uutf, and I'm not sure why.
** TODO Report bug to Uutf?
* add a non-interactive search mode
  should produces a well-structured textual representation of each
  result and its associated metadata (links, etc) for piping into helper programs
* DONE when no results are selected for download, we should download the result at the point
* DONE result under cursor shall be highlighted and its information fields colored.
* DONE results selected for download shall be distinguished by a green asterisk to their left
* DONE fix parallel download bugs, i have no clue what's going on there:
  i think the essential problem here is that we're just hitting
  library.lol too hard when trying to get the cloudflare download
  links. need to figure out some way to throttle the the introduction
  of new pending download promises. Lwt_throttle might be useful but
  potentially deprecated?
  
  should separate the act of grabbing the download link from
  library.lol from the actual download from cloudflare. that way we
  can throttle download-link acquisition but bang on cloudflare super
  hard.
** DONE separate link-getting
** DONE throttle link-getting
   have a mutex L controlling link-getting ability
   each download promise will operate as follows:
*** begin
*** acquire L
*** sleep 1/2s
*** download link 
*** close L
*** end
** DONE keep downloading as-is
* DONE separate main event handling loop from download and search loops stuff
