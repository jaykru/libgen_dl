* libgen_dl
** Usage: libgen_dl "search term"
** Navigating through results:
| key       | action                                     |
|-----------+--------------------------------------------|
| up/(p)    | go up                                      |
| down/(n)  | go down                                    |
| space/(m) | mark result for download                   |
| (d)       | download marked results or result at point |
| s         | interactively update libgen query          |

** Notes
*** Quirks
**** Files will be saved to $cwd/[Author][Year].[file extension].
**** UTF-8 bug
     There is a known bug where some queries crash the downloader due
     to malformed UTF-8 in the title text. I supsect this bug has its
     root cause in another library but I haven't fully understood
     it. I have a rough workaround implemented, but I'm not sure the
     issue is completely fixed.
*** Mirrors
    We only support library.lol and the Cloudflare IPFS gateway for
    downloads. This combination seems to have just about universal
    coverage, is very fast and has good uptime. Adding more mirrors
    would complicate the implementation and maintenance quite a
    bit. Patches and feature requests for adding mirrors would only be
    accepted if you can demonstrate that the currently implemented
    mirror doesn't have adequate coverage of the libgen catalogue.

*** More planned features, bug fixes
    See ~design.org~.
** FAQ
*** Isn't webscraping stupid and error prone?
    Yes. Libgen doesn't have a proper API for searching, however, so
    some amount of webscraping is necessary to get the book IDs
    required to query their json API. Furthermore, once you have
    scraped the book IDs and have the option to query the json API for
    structured data about the books related to your query, each API
    call is really slow. The delays worked against another
    unmaintained [[https://github.com/ciehanski/libgen-cli][libgen downloader]] I fixed recently (before running
    into Go module hell.)

    I aim to make the webscaping aspects of this tool as modular as
    possible. Even if I stop maintaing it someone could easily come
    along and fix the scraping without modifying anything else about
    the tool.

    One more speculation about this: libgen's json API is, as far as I
    gather, primarily intended for internal use. It wouldn't surprise
    me, therefore, if it were more subject to flux than the
    public-facing HTML that has remained as far as I can tell mostly
    stable for the past few years
